{"version":3,"sources":["webpack://@wings-software/telemetry/webpack/bootstrap","webpack://@wings-software/telemetry/webpack/runtime/define property getters","webpack://@wings-software/telemetry/webpack/runtime/hasOwnProperty shorthand","webpack://@wings-software/telemetry/webpack/runtime/make namespace object","webpack://@wings-software/telemetry/./src/index.ts","webpack://@wings-software/telemetry/./src/analytics.ts"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","isInitialized","window","analytics","initialize","Telemetry","sourceKey","invoked","console","error","methods","factory","method","functionArgs","args","Array","slice","unshift","push","i","length","load","options","script","document","createElement","type","async","src","first","getElementsByTagName","parentNode","insertBefore","_loadOptions","SNIPPET_VERSION","initializeAnalytics","this","initialized","statusInterval","setInterval","updateInitializedStatus","id","accountId","properties","url","location","href","clearInterval","userId","checkInitialized","identify","track","event","augmentedProperties","augmentProperties","page","name","category"],"mappings":"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","file":"index.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Track from './types/Track'\nimport Page from './types/Page'\n\nimport initializeAnalytics from './analytics'\n\ndeclare global {\n  interface Window {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    analytics: any\n  }\n}\n\nfunction isInitialized(): boolean {\n  return typeof window.analytics !== 'undefined' && typeof window.analytics?.initialize !== 'undefined'\n}\n\nexport default class Telemetry {\n  analytics: Window['analytics']\n  accountId?: string\n  initialized: boolean\n  statusInterval?: number\n\n  constructor(sourceKey?: string) {\n    if (sourceKey) {\n      initializeAnalytics(sourceKey)\n    }\n\n    this.analytics = window.analytics\n    this.initialized = isInitialized()\n\n    if (!this.initialized && typeof window !== 'undefined') {\n      this.statusInterval = window.setInterval(this.updateInitializedStatus, 1000)\n    }\n  }\n\n  set setAccountId(id: string) {\n    this.accountId = id\n  }\n\n  augmentProperties(properties: { [key: string]: string }): { [key: string]: string } {\n    if (this.accountId) {\n      return {\n        ...properties,\n        url: window.location.href,\n        accountId: this.accountId\n      }\n    }\n\n    return {\n      ...properties,\n      url: window.location.href\n    }\n  }\n\n  updateInitializedStatus(): void {\n    if (isInitialized()) {\n      this.initialized = true\n      this.analytics = window.analytics\n    }\n\n    clearInterval(this.statusInterval)\n  }\n\n  checkInitialized(): boolean {\n    if (this.initialized) {\n      return true\n    }\n\n    // eslint-disable-next-line no-console\n    console.error('The telemetry package needs to be initialized before calling analytics methods')\n\n    return false\n  }\n\n  identify(userId: string): void {\n    if (this.checkInitialized()) {\n      this.analytics.identify(userId, null, {}, {})\n    }\n  }\n\n  track(track: Track): void {\n    if (this.checkInitialized()) {\n      const { event, properties } = track\n\n      const augmentedProperties = this.augmentProperties(properties)\n\n      this.analytics.track(event, augmentedProperties, {}, {})\n    }\n  }\n\n  page(page: Page): void {\n    if (this.checkInitialized()) {\n      const { name, category, properties } = page\n\n      const augmentedProperties = this.augmentProperties(properties)\n\n      this.analytics.page(category, name, augmentedProperties, {}, {})\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-console */\n\ndeclare global {\n  interface Window {\n    analytics: any\n  }\n}\n\nexport default function initializeAnalytics(sourceKey: string): void {\n  const analytics = (window.analytics = window.analytics || [])\n\n  // If the real analytics.js is already on the page return.\n  if (analytics.initialize) return\n\n  // If the snippet was invoked already show an error.\n  if (analytics.invoked) {\n    if (window.console && console.error) {\n      console.error('Segment snippet included twice.')\n    }\n    return\n  }\n\n  // Invoked flag, to make sure the snippet\n  // is never invoked twice.\n  analytics.invoked = true\n\n  // A list of the methods in Analytics.js to stub.\n  analytics.methods = [\n    'trackSubmit',\n    'trackClick',\n    'trackLink',\n    'trackForm',\n    'pageview',\n    'identify',\n    'reset',\n    'group',\n    'track',\n    'ready',\n    'alias',\n    'debug',\n    'page',\n    'once',\n    'off',\n    'on',\n    'addSourceMiddleware',\n    'addIntegrationMiddleware',\n    'setAnonymousId',\n    'addDestinationMiddleware'\n  ]\n\n  // Define a factory to create stubs. These are placeholders\n  // for methods in Analytics.js so that you never have to wait\n  // for it to load to actually record data. The `method` is\n  // stored as the first argument, so we can replay the data.\n  analytics.factory = function (method: (...args: any[]) => void) {\n    return function (...functionArgs: any[]) {\n      const args = Array.prototype.slice.call(functionArgs)\n      args.unshift(method)\n      analytics.push(args)\n      return analytics\n    }\n  }\n\n  // For each of our methods, generate a queueing stub.\n  for (let i = 0; i < analytics.methods.length; i += 1) {\n    const key = analytics.methods[i]\n    analytics[key] = analytics.factory(key)\n  }\n\n  // Define a method to load Analytics.js from our CDN,\n  // and that will be sure to only ever load it once.\n  analytics.load = function (key: any, options: any) {\n    // Create an async script element based on your key.\n    const script = document.createElement('script')\n    script.type = 'text/javascript'\n    script.async = true\n    script.src = `https://cdn.segment.com/analytics.js/v1/${key}/analytics.min.js`\n\n    // Insert our script next to the first script element.\n    const first = document.getElementsByTagName('script')[0]\n    first.parentNode?.insertBefore(script, first)\n    analytics._loadOptions = options\n  }\n\n  // Add a version to keep track of what's in the wild.\n  analytics.SNIPPET_VERSION = '4.1.0'\n\n  // Load Analytics.js with your key, which will automatically\n  // load the tools you've enabled for your account. Boosh!\n  analytics.load(sourceKey)\n}\n"],"sourceRoot":""}